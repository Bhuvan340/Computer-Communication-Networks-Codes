FTP SERVER
#include<stdio.h>
sys/types.h> <sys/socket.h>
<netinet/in.h> <arpa/inet.h>
<stdlib.h> <unistd.h>
<string.h>
#define CHUNK 1024
void readfile(int new_sd) {
char buf[CHUNK]; int n;
FILE*file;
file=fopen("temp.txt","r");
if(file==NULL) {
printf("Error in opening a file"); }
else {
while(fgets(buf,sizeof(buf),file)!=NULL) {
n=strlen(buf); write(new_sd,buf,n);
bzero(buf,sizeof(buf)); } }
fclose(file); }
int main(int argc, char **argv) {
int n; int yes=1;
int sd, new_sd, client_len, port;
struct sockaddr_in server,client;
char buf[1024]; port=atoi(argv[1]);
if((sd=socket(AF_INET,SOCK_STREAM,0))==-1)
{ fprintf(stderr,"can't create a socket\n");
exit(1); } server.sin_family=AF_INET;
server.sin_port=port;
server.sin_addr.s_addr=inet_addr("127.0.0.1");
if(setsockopt(sd,SOL_SOCKET,SO_REUSEADDR,
&yes, sizeof(yes))==-1) {
perror("setsockopt"); exit(1); }
if(bind(sd,(struct sockaddr *)&server,sizeof
(server))==-1){
fprintf(stderr,"can't bind name to the socket\n");
exit(1); } listen(sd,5); while(1){
client_len= sizeof(client);
if((new_sd=accept(sd,(struct sockaddr *)
&client,&client_len))==-1){
fprintf(stderr,"can't accept client\n");
exit(1); }
n=read(new_sd,buf,sizeof(buf);
readfile(new_sd); close(new_sd);
} close(sd); return(0); }
 
 
 
 
FTP CLIENT
#include<stdio.h>
<sys/types.h> <sys/socket.h>
<netinet/in.h> <arpa/inet.h>
<stdlib.h> <unistd.h>
<netdb.h> <string.h>
#define CHUNK 1024
void writefile(int sd){
char buf[CHUNK]; int n ,i;
FILE *file; file=fopen("temp.txt","w");
if(file== NULL)  {
printf("\n ERROR OPENING A FILE");
} while((read(sd,buf,sizeof(buf)))>0)
{ fputs(buf,file); bzero(buf,sizeof(buf));
}  } int main(int argc, char **argv)
{ int n; int sd,port;
struct sockaddr_in server;
char buf[1024]; port=atoi(argv[1]);
if((sd=socket(AF_INET,SOCK_STREAM,0))==-1)
{ fprintf(stderr,"cant create socket\n");
exit(1); }
server.sin_family=AF_INET;
server.sin_port=port;
server.sin_addr.s_addr=inet_addr("127.0.0.1");
if(connect(sd,(struct sockaddr *)& server,sizeof
(server))==-1)  {
fprintf(stderr,"cant connect\n"); exit(1); }
printf("Enter the command :");
scanf("%s",buf);  /get's user's text/
write(sd,buf,sizeof(buf));
writefile(sd); close(sd); return(0);  }